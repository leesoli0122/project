오답 필기

📚 Chapter 1: 디자인 이론 및 색채학
1.1 디자인의 기본 개념
디자인의 정의와 역사

디자인(Design): 라틴어 'Designare'에서 유래, "계획하다, 설계하다"의 의미
프랑스어 데생(Dessin): 소묘, 밑그림의 의미로 같은 어원
역사적 발전:

르네상스 시대 이후 오랫동안 데생과 같이 가벼운 의미로 사용
1920~1930년대 근대 디자인 운동 이후부터 본격적인 디자인 개념으로 사용
❌ 1940년대 바우하우스에서 처음 사용 (X) → 바우하우스는 1919~1933년 활동



디자인의 목적과 기능

인간이 더 사용하기 쉽고 아름답고 쾌적한 생활환경 창조
조형 행위를 통한 문제 해결
기능성과 심미성의 조화

1.2 색채학 완전정복
색의 3속성

색상(Hue): 빨강, 파랑, 노랑 등 색의 이름
명도(Value/Brightness): 색의 밝고 어두운 정도
채도(Chroma/Saturation): 색의 선명도, 순수성

명도 심화 학습

정의: 흑백사진에서 볼 수 있는 색상의 밝고 어두운 정도
변화 요인:

흰색 혼합 → 명도 상승 (Tint, 틴트)
검은색 혼합 → 명도 하강 (Shade, 쉐이드)
❌ 검은색 혼합만으로 변화 (X)


무색(Achromatic): 명도만 존재하는 상태 (흰색, 회색, 검은색)
유채색: 색상을 가진 색들

색상환과 색 체계

가산혼합(RGB):

R(Red) + G(Green) = Y(Yellow)
G(Green) + B(Blue) = C(Cyan)
B(Blue) + R(Red) = M(Magenta)


감산혼합(CMY):

C(Cyan) + M(Magenta) = B(Blue)
M(Magenta) + Y(Yellow) = R(Red)
Y(Yellow) + C(Cyan) = G(Green)



색온도와 색의 성격

난색(Warm Colors):

색상: 빨강, 주황, 노랑 계열
심리적 효과: 따뜻함, 적극성, 흥분
시각적 효과: 팽창, 진출 (앞으로 나와 보임, 실제보다 크게 보임)


한색(Cool Colors):

색상: 파랑, 청록, 보라 계열
심리적 효과: 차가움, 소극성, 진정
시각적 효과: 수축, 후퇴 (뒤로 물러나 보임, 실제보다 작게 보임)



색채 대비 현상

동시대비: 인접하거나 다른 색 안에 놓인 두 색을 동시에 볼 때 서로 다르게 보이는 현상

색상대비: 서로 다른 색상끼리의 대비
명도대비: 밝은 색과 어두운 색의 대비
채도대비: 선명한 색과 탁한 색의 대비
보색대비: 색상환에서 정반대편 색의 대비


계시대비: 시간 차이를 두고 보는 색의 대비
한난대비: 따뜻한 색과 차가운 색의 대비 (동시대비와는 별개)

색명 체계

기본색명: 빨강, 파랑, 노랑 등 기본적인 색 이름
일반색명:

명도, 채도에 수식어를 붙여 표현
예: 어두운 파랑, 연보라, 밝은 초록


관용색명:

고유한 이름을 가진 색
인명, 지명, 원료, 자연물 등에서 따온 이름
예: 귤색, 밤색, 코발트 블루, 로즈골드



색채 조화 원칙

효과적인 배색 방법:

색상의 수를 최소화 (3~5색 권장)
색온도 활용 (난색과 한색의 조화)
환경의 밝기 고려
면적비 고려


❌ 피해야 할 것: 무조건 고채도 색상 사용 (조화롭지 않을 수 있음)

1.3 디자인 원리와 요소
디자인 원리

균형(Balance):

대칭(Symmetry): 안정적이지만 정적, 격식적
비대칭(Asymmetry): 비중이 안정된 상태, 자유로움, 개성적, 활동감
방사형 균형: 중심점에서 사방으로 퍼지는 균형


비례(Proportion):

황금비(Golden Ratio): 1:1.618
황금분할: 작은 부분 : 큰 부분 = 큰 부분 : 전체
루트구형: √2, √3, √4 등의 비례
요소의 전체와 부분을 연관시켜 상대적으로 설명


강조(Emphasis): 시선을 집중시키는 원리
리듬(Rhythm): 규칙적 또는 불규칙적 반복
통일(Unity): 전체적 일관성
대비(Contrast): 차이를 통한 시각적 흥미

디자인 요소

점(Point): 위치를 나타내는 최소 단위
선(Line): 점의 이동, 방향성 표현
면(Plane): 선의 이동, 형태 구성
형태(Form): 3차원적 볼륨
색채(Color): 시각적 자극
질감(Texture): 표면의 성질

📱 Chapter 2: 디지털 이미지와 그래픽
2.1 디지털 이미지의 종류
래스터 이미지 (Raster/Bitmap Image)

구성: 픽셀(화소)들의 집합
특징:

사진과 같은 복잡한 이미지 표현 가능
확대 시 품질 저하 (계단 현상)
파일 크기가 해상도에 비례


주요 사용처:

포토샵(Photoshop)
디지털 카메라
스캔한 이미지


파일 형식: JPG, PNG, GIF, BMP, TIFF 등
❌ 일러스트레이터는 벡터 이미지 프로그램

벡터 이미지 (Vector Image)

구성: 수학적 공식과 좌표
특징:

확대해도 품질 유지
파일 크기가 작음
단순한 형태에 적합


주요 사용처:

일러스트레이터(Illustrator)
로고, 아이콘 디자인
인쇄물 디자인


파일 형식: AI, EPS, SVG, PDF 등

2.2 픽셀과 해상도
픽셀(Pixel) 완전 이해

어원: Picture + Element의 합성어
정의: 디지털 이미지를 구성하는 최소 단위
위치: 직교좌표계의 x, y 좌표로 표시
색심도(Color Depth):

한 픽셀이 표현할 수 있는 색의 수
클수록 더 많은 색상 표현 가능
❌ 색심도가 클수록 적은 색상 (X)



해상도 개념

화면 해상도: 모니터가 표시할 수 있는 픽셀 수
이미지 해상도: 이미지 파일의 픽셀 크기
인쇄 해상도: 인치당 픽셀 수 (PPI, DPI)

2.3 이미지 변환과 처리
이미지 변환

래스터라이징(Rasterizing): 벡터 → 래스터 변환
벡터라이징(Vectorizing): 래스터 → 벡터 변환

이미지 보정 및 수정

크로핑(Cropping): 이미지 자르기
노이즈(Noise) 삭제: 불필요한 점들 제거
컬러(Color) 조절: 색상, 명도, 채도 조정
❌ 윤곽선 흐리게: 이미지 편집이지 보정이 아님

이미지 최적화

목적: 파일 크기 줄이면서 품질 유지
방법:

적절한 파일 형식 선택
압축률 조정
불필요한 메타데이터 제거


사용 도구: 포토샵 등 전용 이미지 편집 소프트웨어
❌ 드림위버는 웹 개발 도구로 이미지 최적화에 부적합

💻 Chapter 3: 웹 기술과 프로그래밍
3.1 웹 프로그래밍 언어 분류
클라이언트 사이드 기술

JavaScript:

브라우저에서 직접 실행
HTML 문서에 포함되어 실행
동적 웹페이지 제작
사용자 상호작용 처리



서버 사이드 기술

ASP (Active Server Pages): Microsoft 기술
JSP (Java Server Pages): Java 기반
PHP: 오픈소스 서버 스크립트 언어
특징: 서버에서 실행되어 HTML로 결과 전송

3.2 JavaScript 완전 분석
JavaScript 특징

스크립트 언어: HTML 문서에 포함되어 실행
동적 기능: 웹페이지에 상호작용성 부여
인터프리터 언어:

컴파일 과정 없이 바로 실행
❌ 컴파일 과정을 통한 실행 (X)


플랫폼 독립적: 모든 브라우저에서 실행 가능

이벤트 처리

이벤트(Event): 사용자 행동이나 시스템 상황

클릭, 키보드 입력, 마우스 움직임 등


이벤트 핸들러(Event Handler):

이벤트 발생 시 실행될 코드 정의
사용자의 특정 행동에 대한 처리 담당



3.3 웹 서버와 통신
웹 서버 동작 과정

연결 설정: 클라이언트가 서버에 연결 요청
클라이언트 정보 요청: HTTP 요청 전송
서버 응답: 요청 처리 후 HTTP 응답 전송
연결 종료: 응답 완료 후 연결 해제

HTTP 통신 특징

무상태(Stateless): 각 요청이 독립적
요청-응답 구조: 클라이언트 요청에 서버가 응답
포트 번호: 일반적으로 80번(HTTP), 443번(HTTPS) 사용

3.4 웹 개발 도구와 방식
WYSIWYG 편집

정의: What You See Is What You Get
특징: 소스 코드 없이 시각적으로 편집
장점: 직관적, 초보자 친화적
단점: 코드 제어 한계, 불필요한 코드 생성 가능

주요 개발 도구

드림위버(Dreamweaver): 웹 개발 통합 환경
비주얼 스튜디오 코드: 코드 에디터
포토샵: 이미지 편집 (웹용 이미지 최적화)
일러스트레이터: 벡터 그래픽 디자인

🎨 Chapter 4: 3D 그래픽과 렌더링
4.1 3D 렌더링 파이프라인
쉐이딩(Shading) 기법

플랫 쉐이딩(Flat Shading):

면 단위로 단색 처리
각진 느낌, 빠른 처리속도


고러드 쉐이딩(Gouraud Shading):

정점에서 색상 계산 후 보간
부드러운 표면 표현


퐁 쉐이딩(Phong Shading):

픽셀 단위로 정밀한 조명 계산
가장 사실적, 처리 시간 많음



❌ **클리핑(Clipping)**은 쉐이딩 기법이 아님 (렌더링 과정에서 화면 밖 오브젝트 처리)
4.2 3D 모델링 방식
모델링 기법 분류

와이어프레임(Wire-frame):

점과 선으로만 구성
골격 구조만 표현
빠른 처리, 구조 파악 용이


솔리드 모델링(Solid Modeling):

내부가 꽉 찬 고형 모델
부피와 무게 계산 가능
CAD에서 주로 사용


서피스 모델링(Surface Modeling):

표면만 정의
곡선/곡면 표현에 특화


CSG (Constructive Solid Geometry):

기본 도형들의 결합/절단으로 복잡한 형상 생성
불린 연산 활용



특수 모델링 기법

프랙탈 모델(Fractal Model):

불규칙적 자연물 표현에 특화
구름, 바다 물결, 산, 연기, 소용돌이 등
자기 유사성 기반
단순한 규칙으로 복잡한 형태 생성



4.3 3D 그래픽 파이프라인

모델링: 3D 객체 생성
애니메이션: 객체의 움직임 정의
렌더링: 2D 이미지로 변환
후처리: 효과 추가, 합성

📋 Chapter 5: 프로젝트 관리와 문서
5.1 디자인 씽킹 프로세스
5단계 프로세스

공감(Empathize):

사용자 인터뷰, 관찰, 설문조사
사용자의 생각, 감정, 행동 이해
사용자 요구사항 파악


정의(Define):

공감을 바탕으로 문제 명확화
구체적인 문제 진술문 작성
해결해야 할 핵심 문제 도출


아이디어 도출(Ideate):

브레인스토밍, SCAMPER 등 활용
다양한 창의적 해결책 생성
양적 아이디어 생산에 집중


프로토타입(Prototype):

아이디어를 구체적 형태로 구현
빠르고 저렴한 시제품 제작
아이디어 검증을 위한 도구


테스트(Test):

사용자와의 상호작용 테스트
사용성, 기능성 평가
피드백 수집 및 개선점 도출



5.2 프로젝트 문서 체계
주요 문서 종류

제안요청서(RFP: Request for Proposal):

발주기관이 기술 공급업체에 제출 요청
프로젝트 요구사항, 범위, 제출 방법 안내
제안서 작성 지침, 평가 기준 포함


제안서: 공급업체가 발주기관에 제출하는 응답 문서
요구사항 정의서: 프로젝트의 기능적/비기능적 요구사항 명세
기획서: 프로젝트의 전체적 계획과 방향 제시

CBD SW 개발 표준 산출물
✅ 포함되는 문서:

요구사항 정의서
아키텍처 설계서
컴포넌트 설계서
인터페이스 설계서
데이터베이스 설계서

❌ 포함되지 않는 문서:

인적 자원 관리 계획서 (프로젝트 관리 문서)

5.3 웹 디자인 프로세스
3단계 프로세스

Pre-Production (전반 제작):

기획 및 분석
콘셉트 구상
디자인 계획 수립
사이트 구조 설계


Production (제작):

콘텐츠 디자인
페이지 개발
코딩 작업
기능 구현


Post-Production (후반 제작):

사이트 홍보
마케팅 활동
유지보수 계획
성과 분석



🌐 Chapter 6: 웹 최적화와 사용자 경험
6.1 웹페이지 용량 최적화
효과적인 최적화 방법

코드 최적화:

사용하지 않는 CSS/JavaScript 파일 삭제
불필요한 코드 부분 제거
코드 압축 (Minification)


이미지 최적화:

적절한 해상도 설정
압축률 조정
포맷 선택 (JPG, PNG, WebP 등)
전용 도구 사용: 포토샵, 온라인 압축 도구


리소스 관리:

CDN 활용
캐싱 전략
지연 로딩(Lazy Loading)



❌ 부적절한 방법: 드림위버로 이미지 용량 줄이기
6.2 웹페이지 저작 원칙
종합적 접근법

디자인: 시각적 매력과 브랜드 일관성
사용자 경험(UX): 직관적 인터페이스, 편리한 네비게이션
콘텐츠: 가치 있는 정보 제공
기술: 웹 표준 준수, 접근성 고려
❌ 코딩만이 가장 중요한 것은 아님

사용자 중심 설계

가독성 확보: 텍스트를 방해하지 않는 그래픽 배치
정보 밀도 조절: 한 페이지에 너무 많은 내용 배치 금지
확장성 고려: XML 등을 활용한 태그 확장

6.3 경쟁사 분석
분석 목적
✅ 올바른 목적:

해당 분야 인터넷 시장 파악
자사 사이트 경쟁력 제고
업계 트렌드와 시장 흐름 이해
벤치마킹을 통한 개선점 도출

❌ 부적절한 목적: 콘텐츠 도용 (저작권 침해)
분석 방법론

기능적 분석: 주요 기능, 사용성 평가
디자인 분석: 시각적 요소, 브랜딩 분석
콘텐츠 분석: 정보 구조, 콘텐츠 품질 평가
기술적 분석: 사용 기술, 성능 분석

🔧 Chapter 7: 심화 기술 개념
7.1 웹 표준과 접근성
웹 표준 준수

HTML 시맨틱 마크업: 의미에 맞는 태그 사용
CSS 분리: 구조와 표현의 분리
크로스 브라우징: 다양한 브라우저 지원

웹 접근성

시각 장애인 지원: 대체 텍스트, 스크린 리더 호환
키보드 네비게이션: 마우스 없이도 사용 가능
색상 대비: 충분한 명도 대비 확보

7.2 반응형 웹 디자인
핵심 기술

미디어 쿼리: 화면 크기별 스타일 적용
플렉시블 그리드: 비율 기반 레이아웃
유동적 이미지: 화면에 맞는 이미지 크기 조절

7.3 최신 웹 기술 트렌드
프론트엔드 기술

HTML5: 시맨틱 태그, 멀티미디어 지원
CSS3: 애니메이션, 그라데이션, 그림자 등
JavaScript ES6+: 모던 자바스크립트 문법

개발 도구와 프레임워크

React, Vue.js, Angular: 프론트엔드 프레임워크
Node.js: 서버사이드 자바스크립트
Webpack, Gulp: 빌드 도구