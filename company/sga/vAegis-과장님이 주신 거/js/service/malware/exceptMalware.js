const _MODE = {
	'SKIP' : 4,
    'ON' : 3,
    'OFF' : 0,
    'WARN' : 1        
};
const _SCANMODE = {
	'OFF' : 0,
    'MOVE' : 4,
    'COPY' : 8,
    'REMOVE' : 16,
    'EXECACL' : 32
};

var selectData = {};
var treeNodeMap = {};
var dataMap = {};

var table;
$(function () {
	table = $('#malwareTable').DataTable();
	table.destroy();
	table.clear().draw();
	
	selectGroupList();	
	initEvent();
});

function selectGroupList(){
	var body = {};
		
	body['groupId'] = 'G0000000000000';

	console.log(body);
	
	cf_requestServer(_TR_GROUP_SEARCH, body, lf_serviceCall800101CallBack);	
}

function selectAgentList(){
	var body = {};
		
	body['groupId'] = 'G0000000000000';
	
	cf_requestServer(_TR_CLOUD_SERVER_STATUS, body, lf_serviceCall600072CallBack);	
}

function initEvent() {
	$('a.malware_add_btn').on('click',function(e){
		var editRuleIdx = parseInt($('#editRuleIdx').val());
		
		var filename = $('#filename').val();
		var mode = $('#mode').val();

        if (!filename) {
            alert('파일 경로의 값이 비어있습니다.');
            return;
        } else if(!filename.startsWith('/') && !/^[a-zA-Z]{1}:/g.test(filename)) {
        	alert('파일 경로를 올바르게 입력해주세요.');
            return;
        }
        
		var rows = table.rows().data(); // 중복 정책 확인
		var isDuplicated = false;
		
		$.each(rows, function(index, item) {
			if(editRuleIdx == index) return;
			if (item[1] == filename) {
            	alert('중복된 정책이 존재합니다.');
            	isDuplicated = true;
            }                        
        });
        if(isDuplicated) return;
        
        if($(this).hasClass("policy_add")) {
			table.row.add([
	            mode,
	            filename,
	            '<a href="#" class="rule_edit" style="text-align: center; color: #bbb; font-size: 13px; font-weight: 400;">수정</a> / <a href="#" class="malware_del" style="text-align: center; color: #bbb; font-size: 13px; font-weight: 400;">삭제</a>',
	            '<a href="#" class="rule_align_up" style="text-align: center; color: #bbb; font-size: 13px; font-weight: 400;">↑</a> <a href="#" class="rule_align_down" style="text-align: center; color: #bbb; font-size: 13px; font-weight: 400;">↓</a>'
	        ]);
		} else if($(this).hasClass("policy_edit")) {
			 var editRow = [ 
             	mode, filename, 
             	'<a href="#" class="rule_edit" style="text-align: center; color: #bbb; font-size: 13px; font-weight: 400;">수정</a> / <a href="#" class="malware_del" style="text-align: center; color: #bbb; font-size: 13px; font-weight: 400;">삭제</a>',
		        '<a href="#" class="rule_align_up" style="text-align: center; color: #bbb; font-size: 13px; font-weight: 400;">↑</a> <a href="#" class="rule_align_down" style="text-align: center; color: #bbb; font-size: 13px; font-weight: 400;">↓</a>'
		     ];
		           
             table.row(editRuleIdx).data(editRow);
		}
        table.draw();
        
        lf_addClickEventRule();
        
        $('.policy_add').css('display', '');
        $('.policy_edit').css('display', 'none');
        
        $('#editRuleIdx').val('');
	});	
	
	$('#applyBtn').on('click',function(e){
		if($(this).hasClass('disabled')) return;
		
		var data = {};
		data.equipmarkname = selectData.equipmarkname;
    	data.masterip = selectData.masterip;    	
    	data.equip_id = selectData.hardwareid;
    	
		var rows = table.rows().data();
		var policyList = [];

        $.each(rows, function(index, item){
	        var policy = new Object();
	        policy.mode = _MODE[item[0]];
	        policy.filename = item[1];
	        policyList.push(policy);
	    });	    
	    data.policyList = policyList;
	    
		swal("멀웨어 예외 설정","해당 파일들을 차단 예외 처리 하시겠습니까?","./assets/images/icon_alert01.png", {
	        buttons: ["취소", "확인"],
	    }).then(function(willDelete) {	
	        if (willDelete) {
	        	cf_requestServer(_TR_MALWARE_EXFILE_SET, data, function() {});          
	        }
	    });	
	});	
}

function lf_serviceCall800101CallBack(data) {
	var dataList = data.body['ROOT']['childlist'];
	
	console.log(dataList);
	
	$.each(dataList, function(index, item) {
		addGroupNode('Tree01', 'G0000000000000', item);
	});	
	
	selectAgentList();
}

function lf_serviceCall600072CallBack(data) {
	var dataList = data.body.dataList;
	
	//console.log(dataList);
		
	$.each(dataList, function(index, item) {
		var groupPath = (item['grouppath'] + ':' + item['groupid']).split(':');
		//console.log(item['equipmarkname'] + '/' + item['hardwareid'] + '/' + groupPath);
		if(groupPath.length > 1) {
			addAgentNode('Tree01', groupPath[1], item);
		}
	});
	
	initGroupNode();
}

function addAgentNode(treeName, parentId, data) {
	var agentId = 'E0000000000000';
	var agentName = 'undefined';
	if(data) {
		agentName = data['equipmarkname'] + ' (' + data['masterip'] + ')'; 
		agentId = data['hardwareid'];
	}
	
	var pNode = $('#' + treeName + ' .tree_wrap').jstree(true).get_node($('#' + treeName + ' li[data-jstree*=' + parentId + ']'));
	if(!pNode) pNode = $('#' + treeName + ' .tree_wrap').jstree(true).get_node(treeNodeMap[treeName + '_' + parentId]);
	if(!pNode) {
		console.log('pNode(' + parentId + ') not found');
		return;
	}
	
	//var pNode = $('#' + treeName + ' .tree_wrap').jstree(true).get_node(treeNodeMap[treeName + '_' + parentId]);
	//if(!pNode) {
	//	console.log('pNode(' + parentId + ') not found');
	//	return;
	//}
	var sel = pNode.id;
    sel = sel[0];
            
    var ref = $('#' + treeName + ' .tree_wrap').jstree(true);
    var newNode = { "cloudid": agentId, "type": data['devstatus'] == 1? "file":"file_offline", "state" : "open" };
            
	sel = ref.create_node(pNode, newNode, "last", null);
	
    if(sel) {
    	treeNodeMap[treeName + '_' + agentId] = sel;    	    
        ref.rename_node(sel, agentName);
        dataMap[sel] = data;
    }    
}

function addGroupNode(treeName, parentId, data) {
	var groupId;
	var groupName;
	if(data) {
		groupName = data['groupname']; 
		groupId = data['groupid'];
	}
	
	var pNode = $('#' + treeName + ' .tree_wrap').jstree(true).get_node($('#' + treeName + ' li[data-jstree*=' + parentId + ']'));
	if(!pNode) pNode = $('#' + treeName + ' .tree_wrap').jstree(true).get_node(treeNodeMap[treeName + '_' + parentId]);
	if(!pNode) return false;

	var sel = pNode.id;
    sel = sel[0];
            
    var ref = $('#' + treeName + ' .tree_wrap').jstree(true);
    var newNode = { "cloudid": groupId, "type": "folder", "state" : "open" };

	sel = ref.create_node(pNode, newNode, "last", null);

    if(sel) {
    	treeNodeMap[treeName + '_' + groupId] = sel;
    	ref.rename_node(sel, groupName); 
    	dataMap[sel] = data;    
    }
    
    $('#' + treeName + ' .tree_wrap').jstree("open_all");
}

function initGroupNode() {
	var treeName = 'Tree01';
	var pNode = $('#' + treeName + ' .tree_wrap').jstree(true).get_node($('#' + treeName + ' li[data-jstree*=G0000000000000]'));
	if(!pNode) pNode = $('#' + treeName + ' .tree_wrap').jstree(true).get_node(treeNodeMap[treeName + '_' + parentId]);
	if(!pNode) return false;

	var sel = pNode.id;
	var ref = $('#' + treeName + ' .tree_wrap').jstree(true);
	if(sel) {		
		var children = ref.get_node(sel).children;
		$.each(children, function(index, item) {
			var agentList = ref.get_node(item).children;
			var groupName = ref.get_node(item).text;			
			//console.log(groupName + '/' + agentList.length);			
			var s = groupName.lastIndexOf('(');
			if(s > 0) {						
				groupName = groupName.substring(0, s)
			}
			groupName = groupName + '(' + agentList.length + ')';
			ref.rename_node(item, groupName);
		});
	}
}

function clickNode(data) {
	var id = data.node.id;
	var icon = data.node.icon;
	
	var iconType = data.node.original.type;
	if(iconType != 'file' && iconType != 'file_offline') {
		//console.log('only agent : ' + id);
		return;
	}
	
	var ref = $('#Tree01 .tree_wrap').jstree(true);
    var sel = ref.get_selected();
    
    if(sel) {
    	selectData = dataMap[sel];
    	var name = selectData.equipmarkname + '(' + selectData.masterip + ')';
    	var data = {};
    	data.equipmarkname = selectData.equipmarkname;
    	data.masterip = selectData.masterip;    	
    	data.equip_id = selectData.hardwareid;
    	
    	$('#selAgentID').val(selectData.hardwareid);
    	
    	initFileTree('Tree02');		
    	cf_requestServer(_TR_MALWARE_STATUS, data, lf_serviceCall800201CallBack);
    	cf_requestServer(_TR_MALWARE_EXFILE_SEARCH, data, function() { console.log('예외 파일 요청 : ' + data.masterip); } );    		
    } else {
    	swal("확인", "자산 정보를 찾을 수 없습니다.", {
			icon: "./assets/images/icon_alert04.png",
			buttons:"확인"
		});
    }
}

function putExceptFile(rowData) {
	var rows = table.rows().data();
	var isDuplicated = false;
	
    $.each(rows, function(index, item){
        if(item[1] == rowData.filename) 
        	isDuplicated = true;
    });
    
    if(!isDuplicated) {
		table.row.add([
	        'SKIP',
	        rowData.filename,
	        '<a href="#" class="rule_edit" style="text-align: center; color: #bbb; font-size: 13px; font-weight: 400;">수정</a> / <a href="#" class="malware_del" style="text-align: center; color: #bbb; font-size: 13px; font-weight: 400;">삭제</a>',
            '<a href="#" class="rule_align_up" style="text-align: center; color: #bbb; font-size: 13px; font-weight: 400;">↑</a> <a href="#" class="rule_align_down" style="text-align: center; color: #bbb; font-size: 13px; font-weight: 400;">↓</a>'
	    ]);
	    
	    table.draw();
	    
	    lf_addClickEventRule()
    } else {
    	console.log('중복');
    	console.log(rowData);
    }	  
    
}

function lf_serviceCall800201CallBack(data) {
	var status = data.body.status;
	
	var name = selectData.equipmarkname + '(' + selectData.masterip + ')';
	if(selectData.devstatus == 1) {
		type = "./assets/images/icon_alert01.png";
		message = name + " 파일시스템을 로드하시겠습니까?";
	} else {
		type = "./assets/images/icon_alert04.png";
		message = "경고 : 연결 불안정\n" + name + " 파일시스템을 로드하시겠습니까?";
	}
	
	lf_ready(false);
	swal("확인", message, type, {
        buttons: ["취소", "확인"],
    }).then(function(willDelete) {
        if(willDelete) {
        	// 파일시스템 정보 요청
        	lf_ready(true);
        	requestFileSystem(selectData);
        }
    });	
}

function lf_ready(state) {
	if(state) $('#applyBtn').removeClass('disabled');
	else $('#applyBtn').addClass('disabled'); 
}

function lf_addClickEventRule() {	
    //var table = $table.DataTable();
    lf_loadAlignUi(table);
     
    $('.malware_del').off('click');
    $('.malware_del').click(function(event) {
        event.stopPropagation();
        table.row($(this).parents('tr')).remove().draw();
    });

    $('.rule_edit').off('click');
    $('.rule_edit').click(function(event) {
        lf_editMalwarePolicy(table, $(this));
        
        $('.policy_add').css('display', 'none');
        $('.policy_edit').css('display', '');
    });

    $('.rule_edit_cancel_btn').off('click');
    $('.rule_edit_cancel_btn').click(function() {    
        $('.policy_add').css('display', '');
        $('.policy_edit').css('display', 'none');
        
        $('#editRuleIdx').val('');
    });
}

function lf_editMalwarePolicy(table, $this) { //
    $('#editRuleIdx').val(table.row($this.parents('tr')).index());
    var data = table.row($this.parents('tr')).data();
    var $LI = $('ul.malware_edit > li');
    
    var $innerLI = '';
    var cnt = 0;
    $LI.eq(0).find('ul.list > li').removeClass('selected').removeClass('focus'); // clear
    $LI.eq(0).find('span').text(data[0]);
    $innerLI = $LI.eq(0).find('ul.list').find('li');
    cnt = $innerLI.length;
    for (var i = 0; i < cnt; i++) {
        if ($innerLI.eq(i).text() === data[0]) {
            $innerLI.eq(i).addClass('selected focus'); // 모드
        }
    }
    $LI.eq(1).find('input[type="text"]').val(data[1]); // 파일
}

function lf_loadAlignUi(table) {
	$('.rule_align_up').off('click');
	$('.rule_align_up').click(function(event) {
		var tr = $(this).parents('tr');
    	moveRow(tr, 'up');
	});
	
	$('.rule_align_down').off('click');
	$('.rule_align_down').click(function(event) {
		var tr = $(this).parents('tr');
    	moveRow(tr, 'down');
	});
	
	function moveRow(row, direction) {
		var count = table.rows().count();
	    var index = table.row(row).index();		
	    var order = -1;
	    if (direction === 'down') {
	      order = 1;
	    }
	    
	    var predict = index + order;
	    
	    if(predict < 0 || predict >= count) {
	    	return;
	    }
	    
	    var data1 = table.row(index).data();
	    data1.order += order;
	
	    var data2 = table.row(index + order).data();
	    data2.order += -order;
	
	    table.row(index).data(data2);
	    table.row(index + order).data(data1);
	
	    table.page(0).draw(false);
	    
	    lf_loadAlignUi(table);
	}
}