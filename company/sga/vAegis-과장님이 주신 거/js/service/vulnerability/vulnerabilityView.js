var _QUERY_EQUIP_ID;

var selectData = {};
var treeNodeMap = {};
var dataMap = {};
var idx = 0;

//230728 kimsw: 그룹아이디를 사용하여 Hosts를 필터링하기위해 추가
const GROUP_ID = {
	Aegis: 'G0000000000000',
	Hosts: 'G0000000000001',
	Registry: 'G0000000000002',
	Clusters: 'G0000000000003',
};

//230907 jkcho: reportfilename 결과값을 저장하기 위한 변수 추가
var checkbody={};

$(function () {
	//table = $('#processTable').DataTable();
	//table.destroy();
	//table.clear().draw();
	
	selectGroupList();
	// 230907 jkcho : 상세 보고서 파일 유무 체크 후 없는 경우 a태그 이벤트 동작 방지 
	$('#reportfilename').on('click', function (e) {
    	cf_requestServer(_TR_VULNERABILITY_SCAN_STAT_CHECK, checkbody, function(data) { 
			if(data.body.fileload=="F"){ // 취약성 상세보고서 파일이 없는 경우 동작
				event.preventDefault(); // 클릭 이벤트의 기본 동작 방지
				swal("실패", "상세 보고서 정보를 불러오지 못하였습니다.\n잠시 후 다시 시도해 해주십시오.", {
					icon: "warning",
					buttons:"확인"
				});
			}
		},false);
	});	
});

function scan(state) {
	if(!selectData.masterip) {
		swal("확인", "선택 된 장비가 없습니다.", {
			icon: "warning",
			buttons:"확인"
		});
		return;
	}
	
	let name = selectData.equipmarkname + '(' + selectData.masterip + ')';
	var type = "info";
	if(selectData.devstatus == 1) {
		type = "info";
		message = name;
	} else {
		type = "warning";
		message = "경고 : 연결 불안정\n" + name;
	}
	
	if(state == 0) message += "\n최근 작성 된 취약점 보고서가 없습니다.\n취약점 스캔을 진행하시겠습니까?";
	else message += "\n취약점 스캔을 진행하시겠습니까?";
	
	swal("확인", message, type, {
        buttons: ["취소", "확인"],
    }).then(function(willDelete) {
        if(willDelete) {
        	requestScan(selectData.masterip, selectData.hardwareid);
        }
    });	
}

function requestScan(masterip, hardwareid) {
	var body = {};		
	body['masterip'] = masterip;
	body['equip_id'] = hardwareid;
	
	console.log(body);
	
	cf_requestServer(_TR_VULNERABILITY_SCAN_START, body, function(_data) { 
		console.log(_data);
		swal("확인", "스캔을 마치면 조회가 가능합니다. 잠시 기다려주세요.", {
			icon: "info",
			buttons:"확인"
		});
	});
}

function addVulnerability(data) {
	console.log(data);
	var body = data.body;
	if(!body.id) {
		scan(0);	
	    return;
	}
	
	var table = $('#vulnerabilityTable').DataTable();
	var result = body['resultstr'];
	if(!result) result = {};
	var definitions = result['definitions'];
	if(!definitions) definitions = [];
	
	if(result['tsize'] > 0) {
		$('#cve').html("/ 취약점 : <em class=ovalFail>" + result['tsize'] + "ea</em>");
	} else {
		$('#cve').html("/ 취약점 : <em class=ovalPass>" + result['tsize'] + "ea</em>");
	}
	$('#revisetime').text(" / 스캔 시간 : " + body['revisetime']);	
	$('#reportfilename').html("<a href=/vulnerabilityReport.do?reportfilename=" + body['reportfilename'] + " target=_balnk class='btn cont_btn1 logtxt'>" + "상세 보고서" + "</a>");
	// 230907 jkcho 추가 :  취약성 스캔 결과 파일 이름을 저장하기 위한 checkbody 객체 추가
	checkbody['id'] = body['id'];
	checkbody['equip_id'] = body['equip_id'];
	checkbody['reportfilenames']= body['reportfilename']; 

	$.each(definitions, function(idx, rowData){
		var refStr = "";
		var refDatas = rowData['references'];
		$.each(refDatas, function(idx, refRowData){				
			let cveLink = "<a href=" + refRowData['ref_url'] + " target=_blank class=ref_url>" + refRowData['ref_id'] + " </a>";
			refStr += cveLink;
		});
		
		var row = table.row.add([
	        (rowData['result']==true || rowData['result']=='true')? "<em class=ovalFail>취약</em>": "<em class=ovalPass>-</em>",
	        rowData['class'],
	        refStr,
	        rowData['title']
	    ] ).draw( false ).node();
	    $(row).data(rowData); 
	    $(row).attr("id", 'row' + idx);
	});	
}

function selectGroupList(){
	var body = {};
		
	body['groupId'] = 'G0000000000000';

	console.log(body);
	
	cf_requestServer(_TR_GROUP_SEARCH, body, lf_serviceCall800101CallBack);	
}

function selectAgentList(){
	var body = {};
		
	body['groupId'] = 'G0000000000000';
	
	cf_requestServer(_TR_CLOUD_SERVER_STATUS, body, lf_serviceCall600072CallBack);	
}


function initEvent() {    
	$('div.dataTables_paginate').on('click', function(event){
        event.stopPropagation();
    });
}

function lf_serviceCall800101CallBack(data) {
	var dataList = data.body['ROOT']['childlist'];
	dataList = dataList.filter(obj => obj.groupid === GROUP_ID.Hosts);
	
	console.log(dataList);
	
	$.each(dataList, function(index, item) {
		addGroupNode('Tree01', 'G0000000000000', item);
	});	
	
	selectAgentList();
}

function lf_serviceCall600072CallBack(data) {
	var dataList = data.body.dataList;
	dataList = dataList.filter(obj => obj.groupid === GROUP_ID.Hosts);
	
	//console.log(dataList);
		
	$.each(dataList, function(index, item) {
		var groupPath = (item['grouppath'] + ':' + item['groupid']).split(':');
		//console.log(item['equipmarkname'] + '/' + item['hardwareid'] + '/' + groupPath);
		if(groupPath.length > 1) {
			addAgentNode('Tree01', groupPath[1], item);
		}
	});
	
	initGroupNode();
	initEvent();
}

function addAgentNode(treeName, parentId, data) {
	var agentId = 'E0000000000000';
	var agentName = 'undefined';
	if(data) {
		agentName = data['equipmarkname'] + ' (' + data['masterip'] + ')'; 
		agentId = data['hardwareid'];
	}
	
	var pNode = $('#' + treeName + ' .tree_wrap').jstree(true).get_node($('#' + treeName + ' li[data-jstree*=' + parentId + ']'));
	if(!pNode) pNode = $('#' + treeName + ' .tree_wrap').jstree(true).get_node(treeNodeMap[treeName + '_' + parentId]);
	if(!pNode) {
		console.log('pNode(' + parentId + ') not found');
		return;
	}

	var sel = pNode.id;
    sel = sel[0];
            
    var ref = $('#' + treeName + ' .tree_wrap').jstree(true);
    var newNode = { "cloudid": agentId, "type": data['devstatus'] == 1? "file":"file_offline", "state" : "open" };
            
	sel = ref.create_node(pNode, newNode, "last", null);
	
    if(sel) {
    	treeNodeMap[treeName + '_' + agentId] = sel;    	    
        ref.rename_node(sel, agentName);
        dataMap[sel] = data;
    }    
    
    if(_QUERY_EQUIP_ID == data['hardwareid']) {
		selectData = data;
		var name = selectData.equipmarkname + '(' + selectData.masterip + ')';		
		$('#equip').text(name);
		
		var body = {};		
		body['masterip'] = selectData.masterip;
		body['equip_id'] = selectData.hardwareid;

		cf_requestServer(_TR_VULNERABILITY_SEARCH, body, addVulnerability);
    }
}

function addGroupNode(treeName, parentId, data) {
	var groupId;
	var groupName;
	if(data) {
		groupName = data['groupname']; 
		groupId = data['groupid'];
	}
	
	var pNode = $('#' + treeName + ' .tree_wrap').jstree(true).get_node($('#' + treeName + ' li[data-jstree*=' + parentId + ']'));
	if(!pNode) pNode = $('#' + treeName + ' .tree_wrap').jstree(true).get_node(treeNodeMap[treeName + '_' + parentId]);
	if(!pNode) return false;

	var sel = pNode.id;
    sel = sel[0];
            
    var ref = $('#' + treeName + ' .tree_wrap').jstree(true);
    var newNode = { "cloudid": groupId, "type": "folder", "state" : "open" };

	sel = ref.create_node(pNode, newNode, "last", null);

    if(sel) {
    	treeNodeMap[treeName + '_' + groupId] = sel;
    	ref.rename_node(sel, groupName); 
    	dataMap[sel] = data;    
    }
    
    $('#' + treeName + ' .tree_wrap').jstree("open_all");
}

function initGroupNode() {
	var treeName = 'Tree01';
	var pNode = $('#' + treeName + ' .tree_wrap').jstree(true).get_node($('#' + treeName + ' li[data-jstree*=G0000000000000]'));
	if(!pNode) pNode = $('#' + treeName + ' .tree_wrap').jstree(true).get_node(treeNodeMap[treeName + '_' + parentId]);
	if(!pNode) return false;

	var sel = pNode.id;
	var ref = $('#' + treeName + ' .tree_wrap').jstree(true);
	if(sel) {		
		var children = ref.get_node(sel).children;
		$.each(children, function(index, item) {
			var agentList = ref.get_node(item).children;
			var groupName = ref.get_node(item).text;			
			//console.log(groupName + '/' + agentList.length);			
			var s = groupName.lastIndexOf('(');
			if(s > 0) {						
				groupName = groupName.substring(0, s)
			}
			groupName = groupName + '(' + agentList.length + ')';
			ref.rename_node(item, groupName);
		});
	}
}

function clickNode(data) {
	var id = data.node.id;
	var icon = data.node.icon;
	
	var iconType = data.node.original.type;
	if(iconType != 'file' && iconType != 'file_offline') {
		//console.log('only agent : ' + id);
		return;
	}
	
	var ref = $('#Tree01 .tree_wrap').jstree(true);
    var sel = ref.get_selected();
    
    if(sel) {
    	selectData = dataMap[sel];
    	var name = selectData.equipmarkname + '(' + selectData.masterip + ')';		
		$('#equip').text(name);
    	$('#vulnerabilityTable').DataTable().clear().draw();
		$('#revisetime').html("");
		$('#reportfilename').html("");
		$('#cve').html("");
    	
    	var body = {};		
		body['masterip'] = selectData.masterip;
		body['equip_id'] = selectData.hardwareid;
		
		cf_requestServer(_TR_VULNERABILITY_SEARCH, body, addVulnerability);
    } else {
    	swal("확인", "자산 정보를 찾을 수 없습니다.", {
			icon: "warning",
			buttons:"확인"
		});
    }
}

