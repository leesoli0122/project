var eventPageNum = 0;
var eventPageCnt = 10;
var eventTotalCnt = 0;
var lvar_param_prefix  = "event_vulnerability_detail"; 
var lvar_param_service = lf_serviceCall600401; //(페이징 버튼 클릭시 호출되는 서비스) 데이터 조회 서비스 ID

var term; // 조회 주기. DAY 또는 WEEK
var registryUuid;
var registryName;

var selectedSeverity; // 선택된 취약성 
var vulSearchKeyword ;
var searchKeywordList = [];
var vulPackageSearchKeyword; 

var selectedCveId; 
var selectedResultUuid;

var useCache = false; // 캐시 키 사용 유무
var statusLoading = false; // loading check flag

var focusUuid; // 저장 시킬 focusUUid

var severityStatus ={
	'Critical' : 'critical',
	'High': 'high',
	'Medium': 'medium',
	'Low':'low',
	'Info':'info'
}

$(function () {
	var dashboardCspData = JSON.parse($('#dashboardCspData', opener.document).attr(window.name)); // 호출한 부모 브라우저의 값을 가진 속성을 가져옴
	
	term = dashboardCspData['term'];
	registryUuid = dashboardCspData['registryUuid'];
	registryName = dashboardCspData['registryName'];
	
	selectedSeverity = dashboardCspData['selectedScanStatus'] ? severityStatus[dashboardCspData['selectedScanStatus']] : null;
	if(selectedSeverity) searchKeywordList.push("severity|"+selectedSeverity);
	detailInfoFiltering(); // 데이터 조회 
	
	// 페이지 종료 시 콜백 함수. 캐시 데이터 반환 
	window.addEventListener('beforeunload', function(event) {
	  if (window.opener && !window.opener.closed) {
	    window.opener.lf_serviceCall600403(lvar_param_prefix + '|' + registryUuid);
	  }
	});
	
	// 클릭 이벤트를 감지하고 포커스를 설정합니다.
	$('#event_vulnerability_detail_result_table tbody').on('click', 'tr', function() {
	    $(this).parent().find('tr').css('background-color','#2f3742');  // 기존 테이블 색상으로 모두 변경
	    $(this).css('background-color', 'black'); // 클릭한 행 색상 변경
		focusUuid = $(this).find('td').eq(9).text(); // focusUuid 최신화
	});
});

/** 
 * 선택된 ROW의 색상을 변경
 */
function focusSelectedUuid(){
	// 최초 페이지 초기화 시 첫번 째 ROW 선택
	if(!focusUuid){
		var selectedRows = $('#event_vulnerability_detail_result_table tbody tr').eq(0);
		var selectedRowsUuid = selectedRows.find('td').eq(9).text(); // 가장 처음 row Uuid
		if(selectedRowsUuid) {
			var firstRowFirstTd = $('#event_vulnerability_detail_result_table tbody tr:first-child td:first-child');
			clickRow(firstRowFirstTd);
			focusUuid = selectedRows.find('td').eq(9).text(); 
			selectedRows.css('background-color', 'black');
		}
		else{
			// 취약성 패키지 테이블이 있다면 초기화
			$('#event_vulnerability_package_result_table').DataTable().clear().draw();  
		}
	}
	else{
		// 해당 조건을 만족하는 <tr> <td> 요소 선택
		var selectedRows = $('#event_vulnerability_detail_result_table tbody tr').filter(function() {
			return $(this).find('td').eq(9).text() == focusUuid;
		});
		// 선택된 <tr> 요소에 대한 작업 수행
		selectedRows.css('background-color', 'black');
	}
	
}
/** 
 * 최초 ROW선택
 */
function initFocusSelectedUuid(){
	// 첫 번째 <tr> <td> 요소 선택
	var selectedRows = $('#event_vulnerability_detail_result_table tbody tr').find('td');
	alert(selectedRows.eq(9).text());

	focusUuid = selectedRows.eq(9).text(); // focusUuid값 가장 처음 row Uuid로 수정
	
	// 선택된 <tr> 요소에 대한 작업 수행
	selectedRows.css('background-color', 'black');
}
/**
 * 새롭게 조건에 따라 쿼리를 조회할 때 호출
 * 1. 최초 진입 시 
 * 1. cntClick 할 때  
 * 2. 검색 할 때
 */
function detailInfoFiltering() {
	// 초기화 작업 
	eventTotalCnt = 0; // 페이징 전체넘버 초기화 
	focusUuid = null; // 선택되어 Focus 된 Uuid 초기화 
	
	 // 데이터 초기화 및 호출. 검색 버튼 클릭시 페이지버튼은 무조건 0
	lf_serviceCall600401(0); 
}

/**
 * 검색 버튼 클릭 시 서비스 필터링 후 조회 
 */
function vulSearchBtnClick(){
	searchKeywordList = []; // 검색 키워드 배열 초기화 후 진행
	vulSearchKeyword = $("#searchKeyword").val();
	if(!vulSearchKeyword){
		vulSearchKeyword = null; // 검색 키워드 조건이 없는경우, 필터링 조건 초기화
	}
	else{
		//searchKeywordList.push("tag|"+$("#searchKeyword").val());
		//searchKeywordList.push("identifier|"+$("#searchKeyword").val());
		//searchKeywordList.push("description|"+$("#searchKeyword").val());
		searchKeywordList.push("tag||identifier||description|"+$("#searchKeyword").val());
	}
	if(selectedSeverity){ // 현재 선택된 현황판 정보 추가
		searchKeywordList.push("severity|"+selectedSeverity);
	}
	detailInfoFiltering();
}
/**
 * 취약성 관련 패키지 검색 버튼 클릭 시
 */
function vulPackageSearchBtnClick(){
	var body = {
		"cveId": selectedCveId,
		"resultUuid": selectedResultUuid,
	};
	vulPackageSearchKeyword  = $("#searchPackageKeyword").val();
	if(!vulPackageSearchKeyword) vulPackageSearchKeyword = null; // 검색 키워드 조건이 없는경우, 필터링 조건 초기화
	else body["searchKeyword"] = vulPackageSearchKeyword;
	
	cf_contPreloader('event_vulnerability_package_result_table'); // 로딩 창
	cf_requestServer(_TR_DASHOBOARD_IS_VULNERABILITY_PACKAGE_DETAIL, body, serviceCallBack600402); 		
}

/**
 * 스캔 현황 카운트 클릭 시 필터링 후 조회
 * 
 */
function cntClick(selectedCntId){
	if(selectedCntId) selectedSeverity = selectedCntId;  // 선택된 severtiy 값을 selectedSeverity 변수에 넣어줌
	/*searchKeywordList = []; // 검색 키워드 배열 초기화
	if(selectedSeverity){
		searchKeywordList.push("severity|"+selectedSeverity);
	}
	detailInfoFiltering();*/
	vulSearchBtnClick(); 
}

/**
 * @service 600401
 * 상세 데이터 조회 
 * @body topic,page,topn,term
 * @callback
 */
function lf_serviceCall600401(pageNum){
	if(!statusLoading){
		cf_contPreloader(lvar_param_prefix+'_result_table'); 
		statusLoading = true;
	}
	
	if(!pageNum && pageNum != 0){
		pageNum = eventPageNum; // default = 0 
	}
	else{
		switch(pageNum){
		case 'first': pageNum = 0; break;
		case 'previous': pageNum = eventPageNum-1; break;
		case 'next': pageNum = eventPageNum+1; break;
		case 'last': pageNum = Math.ceil(eventTotalCnt/eventPageCnt)-1; break;
		}
	}
	eventPageNum = pageNum; // 페이지 넘버 재정의

	var body ={
		"topic": lvar_param_prefix,
		"page" : eventPageNum * eventPageCnt,
		"topn" :  eventPageCnt,
		"term" : term,
		"registry_uuid" : registryUuid,
	};
	// (09-06 추가) 캐시 데이터 사용유무 체크
	if(useCache) { // 캐시 사용하는 경우(페이지 이동, 필터링 검색 시)
		body["isLoaded"] = false;
		body["pageCacheKey"] = lvar_param_prefix + '|' + registryUuid;
	}
	else{ // 캐시를 사용하지 않는 경우(최초 진입 시)
		body["isLoaded"] = true;
	}
	// 검색 키워드가 있는경우 body 에 추가 
	if (searchKeywordList.length > 0) body['keyword'] = searchKeywordList; 
	
	cf_requestServer(_TR_DASHOBOARD_IS_DASHBOARD_DETAIL, body, serviceCallBack600401);
}
// 취약성 디테일 정보 조회 콜백 함 수
function serviceCallBack600401(data,body){
	// 캐시가 사용되지않앗을 경우(최초 진입 시) 
	if(!useCache) {
		// 현황판 현재 시점으로 최신화
		var detailCnt = data.body.detailCnt;
		scanVulnerabilityResultDetail(detailCnt);
		
		useCache = true; // 캐시 사용으로 변경 
		lf_serviceCall600401(); // 재호출. 캐시 데이터에서 정보 조회
	}
	else {
		createResultPage(data,body); // 기존 콜백 로직
	}	
}

function createResultPage(data,body){
	if(statusLoading){ // 로딩 중인 경우 로딩 창 취소
		cf_contPreloader(lvar_param_prefix+'_result_table'); 
		statusLoading = false;
	}

	var table = $('#'+lvar_param_prefix+'_result_table').DataTable();
	table.clear().draw(); 
	var dataList = data.body.dataList;
	
	$.each(dataList, function(idx, rowData){
		var tableRow = table.row.add({
			"Registry": registryName,
			"Digest": transformDataOfNull(rowData['digest']),
			"Image Tag": transformDataOfNull(rowData['tag']), 
			"Identifier": transformDataOfNull(rowData['identifier']), 
			"Severity": transformDataOfNull(rowData['severity']),
			"CVSS Score": rowData['cvss_base_score'] ? rowData['cvss_base_score'] : "N/A", 
			"Description": transformDataOfNull(rowData['description']), 
			"Url": transformDataOfNull(rowData['url']),
			"Created Date":	transformDataOfNull(rowData['created_at']), 
			"Uuid":  transformDataOfNull(rowData['uuid']),
		}).draw(false).node();
		$(tableRow).data(rowData);
		$(tableRow).find('td').attr("onclick","javascript: clickRow(this)");
	}); 
	// 페이징 버튼 생성
	createPagingBotton(data.body.allDataCnt); // 페이지 갯수 cnt 전달
	// 페이징 버튼 클릭시 발생되는 이벤트 정의
	lf_serviceButtonDataCallback(); 
	// focus된 row가 있는경우 표시 
	focusSelectedUuid();
}
/**
 * @param 조회 페이지 길이
 * 페이징 버튼 생성
 */
function createPagingBotton(totalCnt){
	var totalCnt = totalCnt;

	eventTotalCnt = totalCnt;
 	var page = eventPageNum ? eventPageNum : 0;

	var table = $('#'+lvar_param_prefix+'_result_table').DataTable();
	var len = table.page.len();
	
	eventPageCnt = len;
	var pagingValue = totalCnt+"_"+len+"_"+page;
	var info = {
		"start":0,
		"page": page,
		"pages": Math.ceil(totalCnt/len),
		"length": len,
		"recordsTotal": totalCnt,
		"recordsDisplay": totalCnt,
		"all": false
	};
	
	var api = table.columns.adjust();
	var settings = api.settings()[0];
	if(totalCnt >= 0){
		_fnUpdatePaginate(settings,info,lvar_param_service); // page_common.js 에 정의
	}
	$('#detail_info_paging').val(pagingValue); // 페이징 결과값 저장
}

/**
 * 스캔 결과에 대한 데이터 구분
 */
function scanVulnerabilityResultDetail(detailCnt){	
	var criticalCnt = 0;
	var highCnt = 0;
	var mediumCnt = 0;
	var lowCnt = 0;
	var infoCnt = 0;
	var unknownCnt = 0;

	$.each(detailCnt, function(index,value){
		var selectCount = value['count'];
		var selectSeverity = value['severity'];
		
		if(selectSeverity == "critical") criticalCnt += selectCount;
		else if(selectSeverity == "high") highCnt += selectCount;
		else if(selectSeverity == "medium") mediumCnt += selectCount;
		else if(selectSeverity == "low") lowCnt += selectCount;
		else if(selectSeverity == "info") infoCnt += selectCount;
		else if(selectSeverity == "unknown") unknownCnt += selectCount;
	});

	$("#criticalCnt").html(criticalCnt);
	$("#highCnt").html(highCnt);
	$("#mediumCnt").html(mediumCnt);
	$("#lowCnt").html(lowCnt);
	$("#infoCnt").html(infoCnt);
	$("#unknownCnt").html(unknownCnt);
}	
//  페이징 버튼 클릭시 발생되는 이벤트 정의
function lf_serviceButtonDataCallback(){
	var pageArr = $('#detail_info_paging').val().split('_');
	var totalCnt = pageArr[0] ? pageArr[0] : eventTotalCnt;
	var page = eventPageNum ? eventPageNum : 0;
	var table = $('#'+lvar_param_prefix+'_result_table').DataTable();
	var len = pageArr[1];
	var pagingValue = totalCnt+"_"+len+"_"+page;
	var info = {
		"start":0,
		"page": page,
		"pages": Math.ceil(totalCnt/len),
		"length": len,
		"recordsTotal": totalCnt,
		"recordsDisplay": totalCnt,
		"all": false
	};
	
	var api = table.columns.adjust();
	var settings = api.settings()[0];
	if(totalCnt > 0){
		_fnUpdatePaginate(settings,info,lvar_param_service);
	}
	
	$('#detail_info_paging').val(pagingValue);	
}


function serviceCallBack600402(data,body){
	cf_contPreloader('event_vulnerability_package_result_table'); // 로딩 창 취소
	
	var table = $('#event_vulnerability_package_result_table').DataTable();
	table.clear().draw(); 
	var dataList = data.body.dataList;
	
	$.each(dataList, function(idx, rowData){
		// cvss 출력 형식 지정
		var cvss;
		if(transformDataOfNull(rowData['cvss_vector'])!='-'){
			var cvss_vector_data = rowData['cvss_vector'].split("/")[0];
			if(cvss_vector_data.split(":")[0] != "CVSS"){
				cvss = "CVSS:"+rowData["cvss_version"]+"/"+rowData["cvss_vector"]
			}
			else {
				cvss = rowData["cvss_vector"];
			}
		}
		else{
			cvss = '-';
		}
		// 테이블 draw
		var tableRow = table.row.add({
			"Package Name": transformDataOfNull(rowData['package_name']),
			"Package Path": transformDataOfNull(rowData['package_path']),
			"Package Version": transformDataOfNull(rowData['package_version']),
			"Fix Version": transformDataOfNull(rowData['fix_version']),
			"CVSS": cvss,
			"CPE":	transformDataOfNull(rowData['cpe']),
		}).draw(false).node();
		$(tableRow).find('td').attr("class","long_w");
	}); 
}

/**
 * rowData null 처리('-')
 */
function transformDataOfNull(item) {
	var transformData = typeof item !== 'undefined' && item !== null && item !== 'null' && item !== '' ? item : '-';
	return transformData;
}

/**
 * 취약성 데이터 row 클릭시 
 * 관련 package 정보 출력 
 */
function clickRow(thiz){
	var rowData = $(thiz).parent().data(); // td > tr 태그 정보 가져오기 
	selectedCveId = rowData['identifier'];
	selectedResultUuid =  rowData['resultuuid'];

	var body = {
		"cveId": rowData['identifier'],
		"resultUuid": rowData['resultuuid'],
	}
	vulPackageSearchKeyword  = $("#searchPackageKeyword").val();
	if(!vulPackageSearchKeyword) vulPackageSearchKeyword = null; // 검색 키워드 조건이 없는경우, 필터링 조건 초기화
	else body["searchKeyword"] = vulPackageSearchKeyword;

	cf_contPreloader('event_vulnerability_package_result_table'); // 로딩 창
	cf_requestServer(_TR_DASHOBOARD_IS_VULNERABILITY_PACKAGE_DETAIL, body, serviceCallBack600402); 
}

/** 
 * Datatable length 변경 시 호출되는 함수
*/ 
function _fnLengthChange(length){
	eventPageCnt = length;
	lf_serviceCall600401(); // 데이터 조회 
}

